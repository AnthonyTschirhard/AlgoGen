import networkx as nx
from numpy import *
import matplotlib.pyplot as plt

class CGraph:

    """ Initialisation du graph """
    def __init__(self,nbNodes):
        self.nbNodes = nbNodes
        G = nx.scale_free_graph(nbNodes)
        self.graph = G.to_undirected()
        

    """ Calcul du coefficient de correlation entre distribution theorique et experimentale 
    Compris entre 0 et 1 """
    def fit2distri(self):

        ThDistrib = [] # Distribution theorique
        
        for x in self.graph.degree().keys():
            if x!=0:
                ThDistrib.append(self.nbNodes*x**(-2.2))
        res = 0      
        for i in range(len(ThDistrib)):
            d = abs(self.graph.degree(i+1) - ThDistrib[i])
            res += d/(d+ThDistrib[i])            

        # TMP
        Deg = self.graph.degree().keys()
        Val = self.graph.degree().values()
        plt.figure()
        plt.plot(Deg[1:],Val[1:],'ro-') #in-degree
        plt.xlabel('Degree')
        plt.ylabel('Number of nodes')
        plt.title('Degree distribution')

        for x in Deg:
                if x!=0:
                        plt.scatter(x,self.nbNodes*x**(-2.2),c="blue")

        plt.savefig('DegreeDistrib.png')
        plt.close()

        return res/self.nbNodes



    def clustering(self):
        """ Renvoie le coeff de clustering moyen """
        self.cluster = nx.average_clustering(self.graph)
        
        print self.cluster
        
        


G = CGraph(20)
G.fit2distri()
G.clustering()
